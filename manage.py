import asyncio
import os
import logging
from datetime import datetime

from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from aiogram.fsm.storage.memory import MemoryStorage

import db
from keyboards import main_menu_keyboard

logging.basicConfig(level=logging.INFO)

router = Router()


@router.message(CommandStart())
async def start_handler(message: Message):
    user = await db.check_user(message.from_user.id)
    if not user:
        await db.add_user(
            message.from_user.id,
            message.from_user.username,
            message.from_user.first_name,
            message.from_user.last_name
        )
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø —à–∫–æ–ª—å–Ω—ã–π –±–æ—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=main_menu_keyboard
    )


@router.message(F.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def schedule_handler(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å –∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '7A –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'):")


@router.message(F.text.regexp(r'^\d+[–êA]\s+\w+$'))
async def process_schedule(message: Message):
    class_name, day = message.text.split(maxsplit=1)
    lessons = await db.get_schedule(class_name, day)
    if lessons:
        await message.answer(f"üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {class_name} –Ω–∞ {day}:\n{lessons}")
    else:
        await message.answer("‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.")


@router.message(F.text == "üìå –°–æ–±—ã—Ç–∏—è")
async def events_handler(message: Message):
    try:
        events = await db.get_events()
        print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω—ã —Å–æ–±—ã—Ç–∏—è –∏–∑ –ë–î: {events}")

        if not events:
            await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.")
            return

        response = "üìÖ –í—Å–µ —Å–æ–±—ã—Ç–∏—è:\n\n"
        today = datetime.now().date()

        for event in events:
            event_date = event["event_date"]

            if isinstance(event_date, str):
                event_date = datetime.strptime(event_date, "%Y-%m-%d").date()

            formatted_date = event_date.strftime("%d.%m.%Y")

            status = "‚úÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–µ–µ" if event_date >= today else "‚ùå –ü—Ä–æ—à–µ–¥—à–µ–µ"

            response += f"{status} {event['event_name']} ({formatted_date})\n"
            response += f"   {event['description']}\n\n"

        await message.answer(response)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π.")


@router.message(F.text == "‚ÑπÔ∏è FAQ")
async def faq_handler(message: Message):
    faq_items = [
        "‚ùì –ö–æ–≥–¥–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ? - –ë–ª–∏–∂–∞–π—à–µ–µ —Å–æ–±—Ä–∞–Ω–∏–µ 05.04.2024",
        "‚ùì –ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —É—á–∏—Ç–µ–ª–µ–º? - –ß–µ—Ä–µ–∑ –∫–ª–∞—Å—Å–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è",
        "‚ùì –ö–∞–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ? - –í–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å –∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏"
    ]
    await message.answer("\n\n".join(faq_items))


async def main():
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...")
    await db.create_pool()

    test_events = await db.get_events()
    print(f"–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å–æ–±—ã—Ç–∏–π: {test_events}")


async def main():
    bot = Bot(token=os.getenv("BOT_TOKEN"))
    await db.create_pool()

    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(router)

    try:
        await dp.start_polling(bot)
    finally:
        await db.close_pool()


if __name__ == "__main__":
    asyncio.run(main())