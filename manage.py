import asyncio
import os
import logging

import openai
from config import AI_API_KEY
from openai import OpenAI, OpenAIError
from datetime import datetime
from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from ai_utils import chat_with_ai
import db
from keyboards import main_menu_keyboard
import config


logging.basicConfig(level=logging.INFO)
router = Router()
bot = Bot(token=os.getenv("BOT_TOKEN"))
openai.api_key = AI_API_KEY



class AdminStates(StatesGroup):
    waiting_password = State()
    waiting_schedule = State()
    waiting_event = State()


@router.message(CommandStart())
async def start_handler(message: Message):
    user = await db.check_user(message.from_user.id)
    if not user:
        await db.add_user(
            message.from_user.id,
            message.from_user.username,
            message.from_user.first_name,
            message.from_user.last_name
        )
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø —à–∫–æ–ª—å–Ω—ã–π –±–æ—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=main_menu_keyboard
    )


@router.message(F.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def schedule_handler(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å –∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '7A –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'):")


@router.message(F.text.regexp(r'^\d+[–êA]\s+\w+$'))
async def process_schedule(message: Message):
    class_name, day = message.text.split(maxsplit=1)
    lessons = await db.get_schedule(class_name, day)
    if lessons:
        await message.answer(f"üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {class_name} –Ω–∞ {day}:\n{lessons}")
    else:
        await message.answer("‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.")


@router.message(F.text == "üìå –°–æ–±—ã—Ç–∏—è")
async def events_handler(message: Message):
    try:
        events = await db.get_events()
        if not events:
            await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.")
            return

        response = "üìÖ –í—Å–µ —Å–æ–±—ã—Ç–∏—è:\n\n"
        today = datetime.now().date()

        for event in events:
            event_date = event["event_date"]
            if isinstance(event_date, str):
                event_date = datetime.strptime(event_date, "%Y-%m-%d").date()

            formatted_date = event_date.strftime("%d.%m.%Y")
            status = "‚úÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–µ–µ" if event_date >= today else "‚ùå –ü—Ä–æ—à–µ–¥—à–µ–µ"
            response += f"{status} {event['event_name']} ({formatted_date})\n{event['description']}\n\n"

        await message.answer(response)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π.")


# @router.message(F.text == "‚ÑπÔ∏è FAQ")
# async def faq_handler(message: Message):
#     await message.answer("–í—ã –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –æ:\n- –†–∞—Å–ø–∏—Å–∞–Ω–∏–∏\n- –°–æ–±—ã—Ç–∏—è—Ö\n- –î–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏—è—Ö\n- –ö–æ–Ω—Ç–∞–∫—Ç–∞—Ö —à–∫–æ–ª—ã")

FAQ_ANSWERS = {
    "–∫–∞–Ω–∏–∫—É–ª—ã": "–ë–ª–∏–∂–∞–π—à–∏–µ –∫–∞–Ω–∏–∫—É–ª—ã —Å 25 –º–∞—Ä—Ç–∞ –ø–æ 2 –∞–ø—Ä–µ–ª—è",
    "—Å–æ–±—Ä–∞–Ω–∏–µ": "–°–ª–µ–¥—É—é—â–µ–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ 5 –∞–ø—Ä–µ–ª—è –≤ 18:00",
    "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ": "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ' –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å –∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏",
    "—É—á–∏—Ç–µ–ª—å": "–ö–æ–Ω—Ç–∞–∫—Ç—ã —É—á–∏—Ç–µ–ª–µ–π –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —É –∫–ª–∞—Å—Å–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è",
    "–¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ": "–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º –¥–Ω–µ–≤–Ω–∏–∫–µ",
    "–∫—Ä—É–∂–∫–∏": "–°–ø–∏—Å–æ–∫ –∫—Ä—É–∂–∫–æ–≤ –∏ —Å–µ–∫—Ü–∏–π –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —Å–∞–π—Ç–µ —à–∫–æ–ª—ã"
}


@router.message(F.text == "‚ÑπÔ∏è FAQ")
async def faq_handler(message: Message):
    from aiogram.types import ReplyKeyboardMarkup, KeyboardButton


    faq_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ö–æ–≥–¥–∞ –∫–∞–Ω–∏–∫—É–ª—ã?")],
            [KeyboardButton(text="–ö–æ–≥–¥–∞ —Å–æ–±—Ä–∞–Ω–∏–µ?")],
            [KeyboardButton(text="–ö–∞–∫ —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?")],
            [KeyboardButton(text="–ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —É—á–∏—Ç–µ–ª–µ–º?")],
            [KeyboardButton(text="–ì–¥–µ –Ω–∞–π—Ç–∏ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ?")],
            [KeyboardButton(text="–ö–∞–∫–∏–µ –µ—Å—Ç—å –∫—Ä—É–∂–∫–∏?")],
            [KeyboardButton(text="–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π:",
        reply_markup=faq_keyboard
    )


@router.message(F.text.in_(FAQ_ANSWERS.keys()) |
                F.text.in_([q[:-1] for q in FAQ_ANSWERS.keys()]) |
                F.text.endswith("?"))
async def process_faq(message: Message):
    question = message.text.lower().replace("?", "").strip()
    answer = None

    for keyword, ans in FAQ_ANSWERS.items():
        if keyword in question:
            answer = ans
            break

    if not answer:
        answer = await chat_with_ai(message)

    await message.answer(answer, reply_markup=main_menu_keyboard)


@router.message(Command("admin"))
async def admin_start(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    await state.set_state(AdminStates.waiting_password)


@router.message(AdminStates.waiting_password)
async def check_admin_password(message: Message, state: FSMContext):
    if message.text == config.ADMIN_PASSWORD:
        await message.answer(
            "‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n/add_schedule - –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n/add_event - –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ")
        await state.clear()
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
        await state.clear()


@router.message(Command("add_schedule"))
async def add_schedule_start(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ö–ª–∞—Å—Å –î–µ–Ω—å –£—Ä–æ–∫–∏\n–ü—Ä–∏–º–µ—Ä: 7–ê –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞,–§–∏–∑–∏–∫–∞,–•–∏–º–∏—è")
    await state.set_state(AdminStates.waiting_schedule)


@router.message(AdminStates.waiting_schedule)
async def process_add_schedule(message: Message, state: FSMContext):
    try:
        class_name, day, lessons = message.text.split(maxsplit=2)
        async with db.pool.acquire() as conn:
            await conn.execute(
                "INSERT INTO schedule (class_name, day, lessons) VALUES ($1, $2, $3)",
                class_name, day, lessons
            )
        await message.answer("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await state.clear()


@router.message(F.text)
async def process_question(message: Message):
    if len(message.text) > 3:
        lower_text = message.text.lower()
        if any(word in lower_text for word in ["–∫–∞–Ω–∏–∫—É–ª", "–æ—Ç–¥—ã—Ö"]):
            await message.answer("–ë–ª–∏–∂–∞–π—à–∏–µ –∫–∞–Ω–∏–∫—É–ª—ã —Å 25 –º–∞—Ä—Ç–∞ –ø–æ 2 –∞–ø—Ä–µ–ª—è")
        elif any(word in lower_text for word in ["—Å–æ–±—Ä–∞–Ω", "–≤—Å—Ç—Ä–µ—á"]):
            events = await db.get_upcoming_events(30)
            if events:
                response = "–ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è:\n" + "\n".join(
                    f"{e['event_name']} ({e['event_date']})" for e in events
                )
                await message.answer(response)
            else:
                await message.answer("–ë–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            response = await chat_with_ai(message)
            await message.answer(response)


async def send_reminders():
    events = await db.get_upcoming_events(1)
    for event in events:
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ–±–µ
        await bot.send_message(
            chat_id=config.ADMIN_CHAT_ID,
            text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {event['event_name']} –∑–∞–≤—Ç—Ä–∞!\n{event['description']}"
        )


async def on_startup():
    scheduler = AsyncIOScheduler()
    scheduler.add_job(send_reminders, 'cron', hour=9, minute=0)
    scheduler.start()


async def main():
    await db.create_pool()
    await on_startup()

    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(router)

    try:
        await dp.start_polling(bot)
    finally:
        await db.close_pool()


if __name__ == "__main__":
    asyncio.run(main())